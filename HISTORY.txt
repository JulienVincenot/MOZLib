(BEFORE UPDATING, MAKE SURE YOU DON'T HAVE ANY PAST VERSION OF MOZ'LIB ON YOUR MACHINE !)

version changes :

v.1.2

WARNING : In this new version, the MOZ modules (i.e. bpatchers interfaces) have all been renamed with the moz. prefix to avoid eventual conflicts with other libraries. This will break previous patches you made with those modules, including patchcord connections. I know this is frustrating but it is for everyone's good eventually (I regret I didn't do this earlier...). A suggestion to fix your patches, first back them up then open them with a text editor : this way it will be possible to add the prefix to all names of modules you used, either manually or with typical search & replace function. 

MAJOR ADDITIONS in 1.2 :
- PWforMax is now compatible with Windows 10, thanks to Matteo Marson !
  See the dedicated READ-ME for more information about installation.

- a new, HUGE family of modules was added to PWforMax : the polyphonic constraint solver CLUSTERengine by Örjan Sandred, originally written in Lisp for PWGL, is now fully ported to MOZ'Lib with a very similar workflow to chainedPMC. More details in the dedicated overview in Extras menu -> MOZ'Lib ! Note is is highly recommended to be familiar with concepts of chainedPMC before diving in this new engine.

- added two utility modules to the Utilities (ex-"In&Out") category of MOZ modules: 
   * @textToggle which allows every bach objects to switch automatically between native and text modes. This can be very helpful while debugging simple patches;
   * moz.safe, a sort of "gate-protected" bach.reg-based memory holder, and an attempt to reproduce the idea of "locking" a part of a patch similar to PWGL and OM environments

- added the GraphView module (Editors category) based on bach.graph, which attempts to mimick the behavior of PWGL's 2D-Editor or OpenMusic's BPF. For now it allows to display (not edit yet) multiple breakpoint functions in overlay, as well as basic zooming in and scrolling. This module is mostly aimed for schematic representation of compositional parameters or behaviors, or for analysis purpose. It is still very experimental, but more of this kind will probably appear in MOZ'Lib along the development of the dada package.

minor updates in 1.2 :
- from now on, PWforMax relies on SBCL version 2.1.1. If you need to produce another SBCL core with additional functions or libraries, please first see the /sources folder and especially the __INSTALL_SBCL_FROM_SOURCES.txt
- now every big MOZ modules can be "collapsed" (made smaller) by clicking their title (re-clicking brings back the full size) or by sending the message 'collapse 1' (default 0). To know if a module can be collapsed... just try :) If you have a special request for a module that does not allow it yet, shoot me an email.
- PMCrule & heuristic rule modules now allow to include a comment symbol (25 char. max, ideally a spaceless symbol) in the end of a rule code, that will be automatically displayed in red inside the module, without affecting the applied rule code. PMC and JBS rules, when they receive the message cluster_format, return their code part (with additional :true/false or :heuristic flag) which makes them compatible with CLUSTERengine's cluster.r-pmc-one-engine and cluster.set-ranges modules :)
- pw.eval-box, lisp.quickeval, chainedPMC and CLUSTERengine now all accept a message with the code_snippet prefix. This allows your to include manually more Lisp code to take into account before evaluation : define functions, change global variables, you name it... Unfortunately defining a new package is not possible at the moment.
- a new object joins the family of Lisp scripting boxes... lisp.print ! 
It is just like print and bach.print in Max... but in Lisp. Just give it an argument and all printed values will show it as their label in the Max window. See the dedicated tab in the PWforMax Intro to see how it works !
- CHORDview can now accept... actual chords ! just add a layer of brackets around a group of midicents instead of sending a flat list. Chords behave exactly the same as individual notes so they can be moved around freely and swaped just like before.
- PMCdomain will now adapt its length automatically based on length of candidates in a shaping message
- PMC rule modules (true/false and heuristic) now blink when there is a parentheses mistake. When in doubt, always check your code with a good lisp editor like Clozure CL :)
- fixed a bug/feature where DRAWnotes would output a result twice on mouse down then mouse up, now only on mouse up (multislider ♥ mousefilter...)
- fixed several initialization errors in helpfiles
- the graphic issue with jweb (used for lisp.docstring and LISPlore module) was fixed by Cycling'74 in Max 8.1.4


v.1.0b-rc0.95
- first of all, GREAT NEWS : MOZ'Lib (including PWforMax) is fully compatible with macOS Catalina ;)
- added MOZfinder in extras menu, another way to explore existing modules 
- help files now take the screen resolution into account for better display on small screens
- final touches to the documentation
- KNOWN ISSUE in last versions of Max 8 : a new bug/feature of jweb impacts the display of text in LISPlore (reported to Cycling'74)

v.1.0b-rc0.86
- fixed a few bugs here and there
- added a "debugspeed $1" message to the first inlet on chainedPMC, to slow down printing for long computations. It takes a value in milliseconds (default 0 ms, basically there's a speedlim inside :) 
- added also the object reconstruct-lllls-from-print inside the chainedPMC :
(an attempt to fix the display of the debug mode in the Max window, when very long solutions are being constructed...)
- added MIDI-conversion functions to the core, in both PWGL midi-float (approx-midi, m->f, f->m) and OM/bach midicents (approx-mc, mc->f, f->mc)
- added randompath message for pw.eval-box and chainedPMC module + similar @randompath attribute to lisp.quickeval 
  (see explanation in PWforMax Overview -> "Lisp scripting boxes" tab -> @randompath subpatch). 
  This fixes the recurring issue of inconsistent results for multiple instances of those objects used simultaneously, especially in real-time context.

v.1.0b-rc0.7
first beta sent — MOZ'Lib has been completely revamped and documented, and now includes a direct access to the LISP system via SBCL and shell (see PWforMax Overview)