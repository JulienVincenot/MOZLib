{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\info
{\author Orjan Sandred}}\margl1440\margr1440\vieww13440\viewh16660\viewkind1
\deftab720
\pard\pardeftab720\ri0\partightenfactor0

\f0\fs22 \cf0 Test results comparing PMC and the new engine, using different backstep/backjump strategies.\
\
Even though the new engine outperforms PMC when it is using backjumping, it is slower when not using backjumping: they should be very similar in Test 1. It seems that the raw power from the code (using vectors) is slower than the code of PMC (using hash-tables?). It might be explained by that the New Engine did not run from compiled code, which needs to be tested.\
\
Test code\
\pard\pardeftab720\ri0\partightenfactor0

\fs18 \cf0 (time (engine 24 '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)   'integer\
 	(list \
 	(format-indexrule #'(lambda (x y) (= (- x y) 1)) '(1 2))\
 	;(format-wildcardrule #'(lambda (y) (progn (incf *rulecounter*) (print *rulecounter*) t)) '(0))\
 	(format-wildcardrule #'(lambda (x y) (>  (- x y) 0)) '(0 2)) \
	)))\
\pard\pardeftab720\ri0\partightenfactor0

\fs22 \cf0 \
\
\pard\pardeftab720\ri0\partightenfactor0

\f1\b \cf0 Test 1\
\pard\pardeftab720\ri0\partightenfactor0

\f0\b0 \cf0 No backjumping\
\
\pard\tx2240\pardeftab720\ri0\partightenfactor0
\cf0 New Engine:	 5.9 sec (Candidates were tested 31.148.268 times)\
\pard\pardeftab720\ri0\partightenfactor0

\f2\fs24 \cf0 PMC :			   1.95 sec 
\f0\fs22 (Candidates were tested 31.142.328 times)\
\
NOTE that PMC run from compiled code, the New Engine was not compiled before running.\
\
\pard\pardeftab720\ri0\partightenfactor0

\f1\b \cf0 Test 2\
\pard\pardeftab720\ri0\partightenfactor0

\f2\b0\fs24 \cf0 Same as test 1, but allowing New Engine to backjump (function 1: only backjump when a single rule fails ALL candidates, otherwise use the shortest proposed backjump/step)\
\
New Engine:  0.68 sec (Candidates were tested 
\f0\fs22 3.389.484 times)
\f2\fs24 \
\
\pard\pardeftab720\ri0\partightenfactor0

\f0\fs22 \cf0 NOTE that the New Engine was not compiled before running.\
\pard\pardeftab720\ri0\partightenfactor0

\f2\fs24 \cf0 \
\
\pard\pardeftab720\ri0\partightenfactor0

\f3\b \cf0 Test 3\
\pard\pardeftab720\ri0\partightenfactor0

\f2\b0 \cf0 Same as test 1, but allowing New Engine to backjump (function 2: always backjump whenever a rule sugget it)\
\
New Engine:  0.0028 sec (Candidates were tested 
\f0\fs22 624 times)
\f2\fs24 \
\
\pard\pardeftab720\ri0\partightenfactor0

\f0\fs22 \cf0 NOTE that the New Engine was not compiled before running.\
NOTE2: It is quite easy to make a problem that cannot be solved with this backjumping function. It should probably not be used.
\f2\fs24 \
\
\
\'97\
July 7\
\
Tests show that:\
\
- PMC test the rules one at a time, reducing the domain: when one rule is tested, the remaining candidates in the domain are all good. The reduced domain is then sent to the next rule to check and reduce further. Etc. The final reduced domain contain candidates that all are good to use.\
\
-The New Engine stops checking rules the moment a good candidate is found. The remaining domain will this contain the good candidate and a number of candidates that have not been checked yet (and it might not be necessary to ever check them).\
\
- New Engine tests all rules together on a candidate and then backtracks. This is necessary to collect the complete buckjump information for version 2 of the engine.\
\
- New Engine v.3 tests rule one-by-one and only checks the next rule if the first passes. The backtrack information is thus less complete that in version 2. Backtracking always chooses the shortest distance to backtrack, ice, if a step is proposed, it will always be preferred to a jump.\
\
\'97\
July 8\
\
Comparisons using the \'93similar3\'93 Test showed that:\
\
WITH BACKJUMPING DISABLED\
\
Engine v.2 found a solution in 0.14 sec (looped 67938x, backtracked 33949x)\
Engine v.3 found a solution in 0.10 sec (looped 67938x, backtracked 33949x)\
PMC found a solution in 0.06 sec\
\
WITH BACKJUMPING ENABLED\
\
Engine v.2 found a solution is 0.010 sec  (looped 4462x, backtracked 1377x)\
Engine v.3 found a solution in 0.014 sec  (looped 8179x, backtracked 2719x)\
PMC n/a (not able to backjump)\
\
The buckjumping inv.2 is more efficient, but also more risky in terms of missing a potential solution. Also v.3 could (more rarely) miss a solution.}