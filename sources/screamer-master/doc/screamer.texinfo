\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename screamer.info
@settitle Screamer
@c %**end of header

@c for install-info
@dircategory Software development
@direntry
* Screamer:           Nondeterministic Extension to Common Lisp
@end direntry

@setcontentsaftertitlepage

@copying
Copyright 2011 Nikodemus Siivola <nikodemus@@random-state.net>

This manual is distributed under the same terms as Screamer:

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright and authorship notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Happy Constraining!
@end copying

@titlepage

@title Screamer
@subtitle A Nondeterministic Extension to Common Lisp

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@node Top
@top Introduction

Screamer provides a nondeterministic choice-point operator, a
backtracking mechanism, and a forward propagation facility.

Screamer was originally written by Jeffrey Mark Siskind and David
Allen McAllester.

The copy of Screamer this documentation refers to is maintained
courtesy of @url{http://sb-studio.net/, Steel Bank Studio Ltd} by
@email{nikodemus@@sb-studio.net, Nikodemus Siivola}.

The Google Group
@example
@url{http://groups.google.com/group/screamer/}
@end example
exists for Screamer-related discussions.

Screamer is maintained in Git:
@example
git clone git://github.com/nikodemus/screamer.git
@end example
will get you a local copy.
@example
@url{http://github.com/nikodemus/screamer}
@end example
is the GitHub project page.

@contents

@menu
* Original Publications::       
* Overview::                    
* Examples::                    
* Dictionary::                  
* Function Index::              
* Variable Index::              
@end menu

@include include/sb-texinfo.texinfo

@node Original Publications
@comment  node-name,  next,  previous,  up
@chapter Original Publications

Following original publications by Siskind and McAllester form the
basis of this manual:

@url{http://nikodemus.github.io/screamer/screaming-yellow-zonkers.pdf,
Screaming Yellow Zonkers}, 1991. Old Screamer manual, doesn't always
hold true for Screamer 3.20 on which this ``modern'' Screamer is
based, but still probably the most complete discussion of various
operators and the overall design of Screamer outside of this manual.

@url{http://nikodemus.github.io/screamer/screamer-paper.pdf,
Screamer: A Portable Efficient Implementation of Nondeterministic
Common Lisp}, 1993. A paper describing the fundamentals of Screamer.

@url{http://nikodemus.github.io/screamer/nondeterministic-lisp.pdf,
Nondeterministic Lisp as a Substrate for Constraint Logic
Programming}, 1993. A paper describing the constaints propagation
features of Screamer.

@node Overview
@comment  node-name,  next,  previous,  up
@chapter Overview

@section Important Note on Packages

Screamer shadows @code{defun}, and a couple of other symbols.

Examples in this manual are expected to be entered in the package
@code{SCREAMER-USER}, which has the correct @code{defun}.

Packages using Screamer are best defined using
@refmacro{define-screamer-package}, which is like @code{defpackage}
using @code{CL} and @code{SCREAMER} packages, but does the additional
shadowing imports.

This is however by no means necessary: you can also explicitly use
@code{screamer::defun}.

@section Choice-Points, Failure, and Backtracking

Screamer adds nondeterminism by providing the @emph{choice-point}
operator @refmacro{either} and the @emph{failure} operator
@reffun{fail}.

A choice-point is a point in program where more than one thing can
happen. When a choice-point is encountered, one of the possibilities
occurs, and execution continues. Should a failure subsequently occur,
the system backtracks to the last choice-point where multiple
possibilities were still present, and tries again.

Backtracking is controlled by a form providing a nondeterministic
context, eg. @refmacro{all-values}, @refmacro{one-value}, or
@refmacro{for-effects}.

@lisp
(all-values
  (let ((x (either 1 2 3 4)))
    (if (oddp x)
        x
        (fail)))) ; => (1 3)
@end lisp

At first @code{(either 1 2 3 4)} evaluates to 1, which is @code{oddp},
so @code{all-values} receives it and sets about producing the next
value. Now @code{either} returns 2, which isn't @code{oddp}. Hence
@code{fail} is called causing the system to backtrack.

Starting again from the choice-point 3 is produced, which is
@code{oddp}, and is received by @code{all-values}, which in turn
requests the next value. Now @code{either} returns 4, which again
causes @code{fail} to backtrack.

Since the only choice-point available cannot produce any more
alternatives, control passes back to @code{all-values} which returns
the collected values.

Had we wanted only one answer instead of an enumeration of all
possible answers we could have used @code{one-value} instead of
@code{all-values}.

If you're familiar with Prolog, @code{all-values} and @code{one-value}
are analogous to Prolog's @code{bagof} and @code{cut} primitives.

@section Generators

Given @code{either} and @code{fail} we can write functions returning
arbitrary sequences of nondeterministic values. Such functions are
called @emph{generators}, and by convention have names starting with
@code{a-} or @code{an-}.

Consider for example @code{an-integer-between}:

@lisp
;;; Screamer already provides an-integer-between, so we'll
;;; call this by a different name.
(defun an-int-between (min max)
  (if (> min max)
      (fail)
      (either min (an-int-between (1+ min) max))))

(all-values (an-int-between 41 43)) ; => (41 42 43)
@end lisp

Called with two integers, this function produces nondeterministic
values in the given range -- finally backtracking to a previous
choice-point when all possibilities have been exhausted.

Given @code{an-integer-between} and @code{fail} we can write eg. a
generator for square numbers:

@lisp
;;; Square numbers are numbers produced by squaring an integer.
(defun a-square-number (min max)
  (let* ((x (an-integer-between 0 max))
         (square (* x x)))
    (if (<= min square max)
        square
        (fail))))

(all-values (a-square-number 12 80)) ; => (16 25 36 49 64)
@end lisp

We're not restricted to numbers, of course. Writing a generator for
potential comedy duos works just the same:

@lisp
(defun a-comedic-actor ()
  (list (either :tall :short) (either :thin :fat)))

(defun a-comedy-duo ()
  (let ((a (a-comedic-actor))
        (b (a-comedic-actor)))
    (if (or (eq (first a) (first b))
            (eq (second a) (second b)))
        (fail)
        (list a :and b))))

(one-value (a-comedy-duo)) ; => ((:TALL :THIN) :AND (:SHORT :FAT))
@end lisp

@section Side-Effects

What should happen to side-effects when a nondeterministic function
backtracks? It depends. Some side-effects should be retained, and
some undone -- and it is impossible for the system to know in
general what is the right choice in a given case.

Screamer is able to undo effects of @code{setf} and @code{setq}
(including calls to user-defined setf-functions), but cannot undo
calls to other functions with side-effects such as @code{set},
@code{rplaca}, or @code{sort}.

By default all side-effects are retained:

@lisp
(let ((n 0))
  (list :numbers
        (all-values (let ((x (an-integer-between 0 3)))
                      (incf n)
                      x))
        :n n)) ; => (:NUMBERS (0 1 2 3) :N 4)
@end lisp

Macros @refmacro{local} and @refmacro{global} can be used to turn
undoing of side-effects on and off lexically.

@lisp
(let ((m 0)
      (n 0))
  (list :numbers
        (all-values (let ((x (an-integer-between 0 3)))
                      (local
                        (incf n)
                        (global
                          (incf m)))
                      x))
        :m m
        :n n)) ; => (:NUMBERS (0 1 2 3) :M 4 :N 0)
@end lisp

@section Constraint Propagation

In addition to nondeterminism via backtracking as discussed so far,
Screamer also provides for forward constraint propagation via
@emph{logic variables} constructed using @reffun{make-variable}.
Screamer provides a variety of primitives for constraining variables.

By convention suffix @code{v} is used to denote operators that accept
(and potentially return) variables in addition to values. Any
@code{foov} is generally just like @code{foo}, except its arguments
can also be logic variables, and that it may assert facts about them
and will possibly return another variable.

The operator @refmacro{assert!} is the primary tool about asserting facts
about variables.

Expression such as @code{(foov myvar)} typically returns another
variable depending on @code{myvar}, which can be constrained to be
true using @code{assert!}.

Operator @reffun{bound?} can be used to test if variable is bound to a
specific value, and @reffun{value-of} can be used to obtain its value.

@lisp
;;; Make a variable
(defparameter *v* (make-variable "The Answer"))

;;; It is initially unconstrained.
*v* ; => ["The Answer"]

;;; Constrain it to be an integer.
(assert! (integerpv *v*))

*v* ; => ["The Answer" integer]

;;; Constrain 40 to be 2 less than *v*
(assert! (=v 40 (-v *v* 2)))

;;; And we have our answer.
*v* ; => 42

;;; However, there's a catch. Even though *v* printed as 42 above, *v*
;;; is still a variable. This is convenience for working in the REPL:
;;; unbound variables print using square brackets, bound ones print
;;; as their value.
(type-of *v*) ; => SCREAMER::VARIABLE

;;; To obtain its value:
(value-of *v*) ; => 42
@end lisp

Assertions -- and constraint operators in general -- can cause failure
and backtracking, in which case constraints from the last attempt are
undone.

This allows us to search the solution space using backtracking:

@lisp
(defparameter *x* (make-variable "X"))
(defparameter *y* (make-variable "Y"))

(assert! (integerpv *x*))
(assert! (integerpv *y*))

(assert! (=v 0 (+v *x* *y* 42)))

(all-values (let ((x (an-integer-between -50 -30))
                  (y (an-integer-between 2 5)))
              (assert! (=v *x* x))
              (assert! (=v *y* y))
              (list x y))) ; => ((-47 5) (-46 4) (-45 3) (-44 2))
@end lisp

A possibly less intuitive, but usually more efficient method is to
assert range constraints as variables instead of nondeterministic
values, and force a solution:

@lisp
(assert! (=v *x* (an-integer-betweenv -50 -30)))
(assert! (=v *y* (an-integer-betweenv 2 5)))

(all-values
  (solution (list *x* *y*)
            (static-ordering #'linear-force)))
; => ((-47 5) (-46 4) (-45 3) (-44 2))
@end lisp

In this case backtracking occurs only inside @reffun{solution}, when
the system is trying to apply different solution to the given
constraints, whereas in the first one we backtracked over the entire
@code{let}.

@section Current Limitations

Screamer is implemented using a code-walker, which does not
unfortunately currently support the full ANSI Common Lisp.

@subsection Not Supported At All

Following special operators signal an error if they appear in code processed
by the code walker:

@itemize

@item load-time-value
@item symbol-macrolet
@item macrolet

@end itemize

@subsection Limited Support

Following special operators are accepted, but they cannot contain
nondeterministic forms:

@itemize

@item progv
@item unwind-protect
@item catch

@end itemize

Additionally, functions defined using @code{flet} and @code{labels}
are not in nondeterministic context, even if the surrounding context
is nondeterministic.

@subsection Limitations in Undoing Side-Effects

Undoing side-effects via @code{local} is reliable only if the
@code{setf} and @code{setq} forms are lexically apparent:

@lisp
(local (incf (foo)))
@end lisp

may or may not work as expected, depending on how @code{foo} is
implemented. If @code{(incf (foo))} expands using eg. @code{set-foo},
the code-walker will not notice the side-effect.

Undoing side-effects via @code{local} when there is no prior value
might not work as expected, depending on the implementation of the
place:

@itemize

@item
If reading a non-existent value causes an error to be signalled, the
initial assignment inside @code{local} will cause that to happen.

Example: assignment to an unbound variable inside @code{local} signals
an error.

@item
If reading a non-existent value causes a marker object (eg.
@code{nil}) to be returned, undoing the side-effect means assigning
the marker object back to the place.

Example: undoing @code{(setf gethash)} of a previously unknown key
will cause @code{nil} to be stored in the table instead of removing
the new key and its value entirely via @code{remhash}.

@end itemize

@node Examples
@comment  node-name,  next,  previous,  up
@chapter Examples

@section Einstein's Riddle

Solving the ``Einstein's Riddle'' using nondeterministic features of
Screamer, ie. backtracking search.

[ @url{http://nikodemus.github.io/screamer/einstein.lisp.html, HTML} ]
[ @url{http://nikodemus.github.io/screamer/einstein.lisp, Source} ]

@section The Zebra Puzzle

Solving the ``The Zebra Puzzle'', using forward constraint propagation
features of Screamer.

(This puzzle is virtually identical to ``Einstein's Riddle'', but the
solution is very different.)

[ @url{http://nikodemus.github.io/screamer/zebra.lisp.html, HTML} ]
[ @url{http://nikodemus.github.io/screamer/zebra.lisp, Source} ]

@section The Sudoku Puzzle

Solving a sudoku puzzle using forward constraint propagation features
of Screamer.

[ @url{http://nikodemus.github.io/screamer/sudoku.lisp.html, HTML} ]
[ @url{http://nikodemus.github.io/screamer/sudoku.lisp, Source} ]

@node Dictionary
@comment  node-name,  next,  previous,  up
@chapter Dictionary

@section Nondetermism

@include include/macro-screamer-either.texinfo
@include include/fun-screamer-fail.texinfo
@include include/fun-screamer-trail.texinfo
@include include/macro-screamer-all-values.texinfo
@include include/macro-screamer-one-value.texinfo
@include include/macro-screamer-for-effects.texinfo
@include include/macro-screamer-ith-value.texinfo
@include include/macro-screamer-print-values.texinfo
@include include/macro-screamer-possibly?.texinfo
@include include/macro-screamer-necessarily?.texinfo
@include include/macro-screamer-global.texinfo
@include include/macro-screamer-local.texinfo
@include include/fun-screamer-a-boolean.texinfo
@include include/fun-screamer-a-member-of.texinfo
@include include/fun-screamer-an-integer.texinfo
@include include/fun-screamer-an-integer-above.texinfo
@include include/fun-screamer-an-integer-below.texinfo
@include include/fun-screamer-an-integer-between.texinfo
@include include/fun-screamer-apply-nondeterministic.texinfo
@include include/fun-screamer-funcall-nondeterministic.texinfo
@include include/fun-screamer-multiple-value-call-nondeterministic.texinfo
@include include/fun-screamer-nondeterministic-function?.texinfo
@include include/macro-screamer-when-failing.texinfo
@include include/macro-screamer-count-failures.texinfo

@section Constraints

@subsection Basics

@include include/fun-screamer-make-variable.texinfo
@include include/macro-screamer-assert!.texinfo
@include include/fun-screamer-value-of.texinfo
@include include/fun-screamer-apply-substitution.texinfo
@include include/fun-screamer-bound?.texinfo
@include include/fun-screamer-ground?.texinfo
@include include/fun-screamer-applyv.texinfo
@include include/fun-screamer-funcallv.texinfo
@include include/fun-screamer-equalv.texinfo
@include include/fun-screamer-template.texinfo

@subsection Booleans

@include include/fun-screamer-a-booleanv.texinfo
@include include/fun-screamer-booleanpv.texinfo
@include include/macro-screamer-known?.texinfo
@include include/macro-screamer-decide.texinfo
@include include/fun-screamer-notv.texinfo
@include include/fun-screamer-andv.texinfo
@include include/fun-screamer-orv.texinfo
@include include/fun-screamer-count-truesv.texinfo

@subsection Sequences

@include include/fun-screamer-a-member-ofv.texinfo
@include include/fun-screamer-memberv.texinfo

@subsection Numbers

@include include/fun-screamer-a-numberv.texinfo
@include include/fun-screamer-a-realv.texinfo
@include include/fun-screamer-a-real-abovev.texinfo
@include include/fun-screamer-a-real-belowv.texinfo
@include include/fun-screamer-a-real-betweenv.texinfo
@include include/fun-screamer-an-integerv.texinfo
@include include/fun-screamer-an-integer-abovev.texinfo
@include include/fun-screamer-an-integer-belowv.texinfo
@include include/fun-screamer-an-integer-betweenv.texinfo
@include include/fun-screamer-numberpv.texinfo
@include include/fun-screamer-realpv.texinfo
@include include/fun-screamer-integerpv.texinfo
@include include/fun-screamer-minv.texinfo
@include include/fun-screamer-maxv.texinfo
@include include/fun-screamer-plus-v.texinfo
@include include/fun-screamer--v.texinfo
@include include/fun-screamer-star-v.texinfo
@include include/fun-screamer-slash-v.texinfo
@include include/fun-screamer-lt-v.texinfo
@include include/fun-screamer-lt-equals-v.texinfo
@include include/fun-screamer-equals-v.texinfo
@include include/fun-screamer-gt-equals-v.texinfo
@include include/fun-screamer-gt-v.texinfo
@include include/fun-screamer-slash-equals-v.texinfo

@subsection Forcing Solutions

@include include/fun-screamer-solution.texinfo
@include include/fun-screamer-static-ordering.texinfo
@include include/fun-screamer-reorder.texinfo
@include include/fun-screamer-linear-force.texinfo
@include include/fun-screamer-divide-and-conquer-force.texinfo
@include include/fun-screamer-domain-size.texinfo
@include include/fun-screamer-range-size.texinfo

@section Miscellany

@include include/macro-screamer-define-screamer-package.texinfo
@include include/macro-screamer-best-value.texinfo
@include include/fun-screamer-booleanp.texinfo
@include include/fun-screamer-count-trues.texinfo
@include include/fun-screamer-purge.texinfo
@include include/fun-screamer-unwind-trail.texinfo
@include include/fun-screamer-unwedge-screamer.texinfo
@include include/var-screamer-star-dynamic-extent?star.texinfo
@include include/var-screamer-star-screamer-version-star.texinfo
@include include/var-screamer-star-iscream?star.texinfo
@include include/var-screamer-star-maximum-discretization-range-star.texinfo
@include include/var-screamer-star-minimum-shrink-ratio-star.texinfo
@include include/var-screamer-star-strategy-star.texinfo

@include include/short-backmatter.texinfo

@bye
